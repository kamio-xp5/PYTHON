import json
import os

USERS_FILE = os.path.join("users", "users.json")

def load_users():
    if not os.path.exists(USERS_FILE):
        return []
    try:
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            users = json.load(f)
            return users if isinstance(users, list) else []
    except (json.JSONDecodeError, IOError):
        return []

def save_users(users):
    try:
        os.makedirs("users", exist_ok=True)  # Garante que a pasta exista
        with open(USERS_FILE, "w", encoding="utf-8") as f:
            json.dump(users, f, indent=2, ensure_ascii=False)
    except IOError as e:
        print(f"Oops! Ocorreu um erro ao salvar os dados dos usu√°rios: {e}")

def list_users(users):
    if not users:
        print("\nAinda n√£o h√° usu√°rios cadastrados. Que tal adicionar o primeiro?\n")
        return
    print("\nüë• Lista de usu√°rios cadastrados:")
    for idx, user in enumerate(users, 1):
        print(f"{idx}. Nome: {user['nome']} | E-mail: {user['email']}")
    print()

def add_user(users):
    print("\n‚ú® Vamos adicionar um novo usu√°rio!")
    nome = input("Digite o nome completo: ").strip()
    if not nome:
        print("‚ö†Ô∏è O nome n√£o pode ficar em branco. Tente novamente.\n")
        return

    email = input("Digite o e-mail: ").strip()
    if not email:
        print("‚ö†Ô∏è O e-mail n√£o pode ficar em branco. Tente novamente.\n")
        return
    if '@' not in email or '.' not in email:
        print("‚ùå E-mail inv√°lido. Certifique-se de que est√° no formato correto.\n")
        return
    if any(u['email'].lower() == email.lower() for u in users):
        print("üîÅ Este e-mail j√° est√° cadastrado. Use outro.\n")
        return

    users.append({"nome": nome, "email": email})
    save_users(users)
    print(f"‚úÖ Usu√°rio '{nome}' foi adicionado com sucesso!\n")

def remove_user(users):
    if not users:
        print("\nN√£o h√° usu√°rios para remover.\n")
        return

    list_users(users)
    try:
        choice = input("Digite o n√∫mero do usu√°rio que deseja remover (ou '0' para cancelar): ").strip()
        if choice == '0':
            print("üîô A√ß√£o cancelada. Ningu√©m foi removido.\n")
            return

        idx = int(choice)
        if 1 <= idx <= len(users):
            user = users.pop(idx - 1)
            save_users(users)
            print(f"üóëÔ∏è Usu√°rio '{user['nome']}' removido com sucesso.\n")
        else:
            print("‚ùå N√∫mero inv√°lido. Tente novamente.\n")
    except ValueError:
        print("‚ö†Ô∏è Entrada inv√°lida. Por favor, digite um n√∫mero.\n")

def menu():
    users = load_users()
    while True:
        print("=== üåü Bem-vindo ao Gerenciador de Usu√°rios üåü ===")
        print("1Ô∏è‚É£  Listar usu√°rios")
        print("2Ô∏è‚É£  Adicionar novo usu√°rio")
        print("3Ô∏è‚É£  Remover usu√°rio")
        print("4Ô∏è‚É£  Sair do programa")
        choice = input("Escolha uma op√ß√£o (1-4): ").strip()
        print()  # Espa√ßo para melhor leitura

        if choice == '1':
            list_users(users)
        elif choice == '2':
            add_user(users)
        elif choice == '3':
            remove_user(users)
        elif choice == '4':
            print("üëã Encerrando o programa. At√© logo!")
            break
        else:
            print("‚ùó Op√ß√£o inv√°lida. Tente novamente.\n")

if __name__ == "__main__":
    menu()
